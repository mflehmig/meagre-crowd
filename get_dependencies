#! /bin/bash

# === USAGE ===
# This script downloads, unpacks and installs a number of targets. Meagre-crowd (optionally)
# depends on them, and the targets might depend on each other. See solvers_dependencies.csv
# for a full list of a solver's dependencies.
# Usage: Before invoking
# bash get_dependencies <target1> <target2> ... <targetn>
# adapt the variables below to your custom.
#
# Script won't install a target if a directory with the name of <target> already exists 
# in the base directory (= the directory you found this script in). 
#
# How to go about how to invoke this script:
# 1. choose the solvers you want to use with meagre-crowd
# 2. check which dependencies you need in solvers_dependencies.csv
# 3. decide which dependencies you want to install locally (with this script) and 
#    for which the system install is ok
# 4. you always have to install bebop and matio
# 5. adapt the variables (versions) below
# 6. invoke 'bash get_dependencies matio bebop <your target for local inst 1> <target2>
# This script will always favor local installs as deps over system installs.

# === CHANGE THESE VARIABLES ===

# == parallel make ==
PARALLEL_MAKE_DISABLED="yes" # force make to use a single core for compiling
#PARALLEL_MAKE_DISABLED="no" # please choose one!

# == custom lib search path ==
# This script looks in common paths for a dependency. If it can't find your 
# (probably manual?) install, set this.
# customsearchpath="<path1>
#          <path2"
customsearchpath=""

# == Select implementations. == 
# These variables are then used to choose a build. You can only build the libs that
# are listed behind. If you don't intend to build a
# library, you can safely skip the name. If you need to use one of these libs
# as a dependency for a target and have it already built, you can set another name, 
# it doesn't need to be listed behind.
MPI="" # mpich2/mpich1/openmpi or local or skip
BLAS="" # netlib/atlas/local
CBLAS=""
LAPACK="" # netlib or local
METIS="metis" # parmetis or metis -- metis is required by cholmod

# == Select Versions to download. ==
# These variables are then used to match
# library names in their repository. If you don't intend to build a
# library, you can safely skip the version name.
# = Toolkits =
#MPICH2_MPI_VER="1.2.1p1"
#MPICH1_MPI_VER="1.2.7p1"
OPENMPI_VER="2.1.1-8"
CILK_VER="7.3.0-27"
ATLAS_BLAS_VER=3.8.3 # latest stable
COMBBLAS_VERSION="beta_16_2"
OPENBLAS_VERSION="0.2.20+ds-4"
LAPACK_VER="3.7.1-4ubuntu1"
COMBBLAS_VER="16.2"
# Note: no versionable downloads for netlib BLAS, ScaLAPACK

# = Orderings =
AMD_VER="2.2.1"
CAMD_VER="5.1.2-2"
CCOLAMD_VER="5.1.2-2" # required by CHOLMOD
COLAMD_VER="5.1.2-2"
#  UFPACK_VER="3.5.0"
PARMETIS_VER="4.0.3-5"
METIS_VER="5.1.0"
SCOTCH_VER="6.0"
CHOLMOD_VER="5.1.2-2" # can use Metis-4

# = Solvers =
MUMPS_VER=4.9.2 # the solver, not the scripting language
UMFPACK_VER="5.1.2-2"
TAUCS_VER="2.2"
SUPERLU_VER="5.2.1"
COMBBLAS_VER="16.2"
SUPERLU_DIST_VERSION="6.1.0"
PARDISO_VER=""

# === !!UNLESS YOU WANT TO EDIT THE SCRIPT, DON'T CHANGE ANYTHING BELOW!! ===
#
# Editing this file feels like looking for that very important formula in a book 
# without an index. That's horribly unkind, so if you want to edit it, here's a 
# quick help text:
#
# x - change here if you intend to add a new target
#
# * Usage (above)
# * Change these variables (above) (x)
# * Unless you want to edit the script ... (this section)
# * Function declarations (basic functions that don't build any tools or libs)
# * Build functions (functions that build libs/tools) x
#    * Toolkit build functions (x)
#    * Orderings build functions (x)
#    * I/O tools build functions (x - depending on the kind of software you add)
# * Main x
#
# The headings work like this: 
# === first level
# ==  second level
# =   third level
# Upper or lower case headings don't have a meaning, that's historically developed.
#
# As functions are very long, the end with "} # /<functionname>".

# === FUNCTION DECLARATIONS ===
# == help ==
# This function displays a help text. 
function help() {
  echo "$(basename $0) [options]"
  echo "  all: ${TARGETS}"
  echo "  nopar - parallel make is disabled"
  echo "  clean - remove build directories"
  echo "  distclean - clean + remove generated files too"
} # /help

# == err ==
# This function prints errors in an nice format an exits. $1 - package, $2 - error message
function err() {
  echo "ERROR: ${1} - ${2}"
  exit 1
} # /err

# == info == 
#This function prints information in a nice format. $: info message
function info() {
  echo "* $*"
} # /info

# == a2so ==
# This function converts a static library (.a) to a dynamically linked library (.so).
# some notes on dynamic library tools:
# ldd lib.so will show what libraries (and where they are) that a .so depends upon
# ldd -u -r -d lib.so will check that all the necessary symbols can be found
# gcc -shared *.so -Wl,-rpath,${IPATH} -o lib.so will add ${IPATH} as if LD_LIBRARY_PATH was set, so the .so can find its dependancies if they aren't installed in the standard locations
# nm lib.so/a will show the symbols included in a library
# readelf -a lib.so |grep RPATH will show what the rpath is set to
# convert static library .a to dynamic lib .so
# Note: compile requires -fPIC to be relocatable
# a2so <path/static_lib.a>
function a2so() {
  I=$1
  F=$(basename $I)
  D=$(dirname $I)
  mkdir $F-d
  cp $I $F-d/
  cd $F-d
  ar -x $F
  O=$D/${F/.a/.so}
  gcc -shared *.o -Wl,-rpath,${D} $* -o $O
  [ $(LD_LIBRARY_PATH="$D:${LD_LIBRARY_PATH}" ldd -r -d -u $O 2>&1 | wc -l) != "2" ] && LD_LIBRARY_PATH="$D:${LD_LIBRARY_PATH}" ldd -r -d -u $O
  cd - > /dev/null
  rm -rf $F-d
} # /a2so

# == find_library == This function looks in previously set search paths for a library ($1). Provide library without .so or lib. 
function find_library() {
  libfound_err=1
  libname=$1
  for path in $libsearchpath; do
    if [ -e "$path/lib${libname}.so" ] || [ -e "$path/lib${libname}.a" ]; then # TODO make it so that *.so.2 is found as well 
      libpath="$path"
      libfound_err=0
    fi   
  done

  # check alternate names
  if [[ "$libname" = "blas" ]]; then find_library openblas; fi  
  if [[ "$libname" = "scalapack" ]]; then find_library scalapack-openmpi; fi
  if [[ "$libname" = "ptscotch" ]]; then find_library scotch; fi
  if [[ "$libname" = "combblas" ]]; then find_library CombBLAS; fi
  
  if [ "$libfound_err" -eq "1" ]; then info "  lib$libname not found"; fi  
} # /find_library

# == find_header == This function looks for a header ($1) in previously set search paths.
function find_header() {
  incfound_err=1
  incname=$1
  for path in $incsearchpath; do
    if [ -e "$path/${incname}.h" ]; then
      incpath="$path"
      incfound_err=0
    fi
    if [ -e "$S/$incname/$incname.h" ]; then
      incpath="path"
      incfound_err=0
    fi

    # check alternate names
    if [[ "$incname" = "combblas" ]]; then find_header CombBLAS; fi

    if [ "$incfound_err" -eq "1" ]; then info "  $incname.h not found"; fi
  done
}

# == get_and_unpack ==
# This function downloads and unpacks a package if it wasn't found in the directory. $1 - library name (without lib, so), $2 - source link
# get_and_unpack <dest> <src_url>
function get_and_unpack() {
  D=$1
  R=$2
  DL=dl
  cd ${S}
  F=$(basename $R)
  [ ! -f ${DL}/${F} ] && info "  Fetching $F" && wget --directory-prefix=${DL} ${R} &> /dev/null
  # if the version/selection has changed, clear it out
  mkdir ${D} &> /dev/null
  info "  Extracting $F" && tar zxvf ${DL}/${F} -C ${D} &> /dev/null
} # /get_and_unpack


# === BUILD FUNCTIONS ===
# == TOOLKIT BUILD FUNCTIONS ==
# TODO ?? does whatever version of gcc support openmp
# TODO ?? OMP_NUM_THREADS is passed in by mpirun/exec -- does sqsub get this right?

# TODO are lib/include platform specific?? should be! so when running on a new platform we don't need to mess about too much!

# = build_mpi =
function build_mpi() {
  info "MPI"
  MPI_PATH=${INSTALL_BASE_DIR}
  # only installs if directory "mpi" doesn't exist yet in the base dir
  if [[ ! -d ${S}/mpi || ${S}/mpi -nt ${INSTALL_LIB_DIR} ]]; then
    cd ${S}
    case ${MPI} in
      "mpich2" )
        info " ------ compile is broken somewhere..."
        get_and_unpack mpi http://www.mcs.anl.gov/research/projects/mpich2/downloads/tarballs/${MPICH2_MPI_VER}/mpich2-${MPICH2_MPI_VER}.tar.gz
        cd ${S}/mpi/mpich2-${MPICH2_MPI_VER} || err mpi "wrong dir"
        mkdir build-${MACHINE} &> /dev/null # build dir
        BUILD_DIR=${S}/mpi/mpich2-${MPICH2_MPI_VER}/build-${MACHINE}
        cd ${BUILD_DIR}
        # configure options:
        # --enable-fast=O3 : production, non-testing programs
        # --enable-sharedlibs=gcc
        # --with-pm=mpd:gforker:hydra : process manager to build (all three)
        # --with-java=/opt/jdk1.6.0 : path to java for debug/perf tools (Jumpshot)
        info "  Configure"
        ../configure --prefix=${INSTALL_BASE_DIR} --enable-fast=O3 || err ${MPI} "config failed"
        # Note: if build fails, add VERBOSE=1 below
        info "  Build"
        ${MAKE} || err ${MPI} "make failed"
        info "  install"
        ${MAKE} install || err ${MPI} "install failed"
        # TODO need to convert to .a -> .so (libtool!)
        # Note: need "bin" in the path so we can get at mpd, mpicc, mpiexec, mpirun
        MPI_PATH=${INSTALL_BASE_DIR}
      ;;
      # TODO openmpi -- Something w/include files that BLACS doesn't like: mpif-common.h
      "mpich1" )
        info " ------ compile is broken somewhere..."
        get_and_unpack mpi ftp://ftp.mcs.anl.gov/pub/mpi/mpich-${MPICH1_MPI_VER}.tar.gz
        cd ${S}/mpi/mpich-${MPICH1_MPI_VER} || err mpi "wrong dir"
        mkdir build-${MACHINE} &> /dev/null # build dir
        BUILD_DIR=${S}/mpi/mpich-${MPICH1_MPI_VER}/build-${MACHINE}
        cd ${BUILD_DIR}
        info "  Configure"
        ../configure --prefix=${INSTALL_BASE_DIR} --enable-fast=O3 --enable-sharedlib  &> /dev/null || err ${MPI} "config failed"
        # Note: if build fails, add VERBOSE=1 below
        info "  build"
        ${MAKE} &> /dev/null || err ${MPI} "make failed"
        info "  install"
        ${MAKE} install &> /dev/null || err ${MPI} "install failed"
        # TODO need to convert to .a -> .so (libtool!)
        # Note: need "bin" in the path so we can get at mpd, mpicc, mpiexec, mpirun
        MPI_PATH=${INSTALL_BASE_DIR}
      ;;
      "openmpi" )
        get_and_unpack mpi http://www.open-mpi.org/software/ompi/v1.4/downloads/openmpi-${OPENMPI_MPI_VER}.tar.gz
        cd ${S}/mpi/openmpi-${OPENMPI_MPI_VER} || err mpi "wrong dir"
        mkdir build-${MACHINE} &> /dev/null # build dir
        BUILD_DIR=${S}/mpi/openmpi-${OPENMPI_MPI_VER}/build-${MACHINE}
        cd ${BUILD_DIR}
        info "  Configure"
        ../configure --prefix=${INSTALL_BASE_DIR} &> /dev/null || err ${MPI} "config failed"
        # Note: if build fails, add VERBOSE=1 below
        info "  build"
        ${MAKE} &> /dev/null || err ${MPI} "make failed"
        info "  install"
        ${MAKE} install &> /dev/null || err ${MPI} "install failed"
        # Note: need "bin" in the path so we can get at mpd, mpicc, mpiexec, mpirun
        MPI_PATH=${INSTALL_BASE_DIR}
      ;;
      * )
        err ${MPI} "build/install not yet implemented" # TODO
      ;;
    esac
  else
    info "  up-to-date"
  fi
# else it only finds the install path
# find mpi install dir, prefer local install
if [[ -f ${INSTALL_BASE_DIR}/bin/mpirun ]]; then
  MPI_PATH=${INSTALL_BASE_DIR}
else
  MPI_PATH=$(dirname $(dirname $(which mpirun)))
fi
${MPI_PATH}/bin/mpirun -V 2>&1 | head -1 || err ${MPI}-skipped "missing mpirun"
MPI_DLIB="-L${MPI_PATH}/lib -lmpi"
[[ ${MPI_PATH} =~ "/usr" ]] && MPI_DLIB="-lmpi" # skip the rpath if its in the default location
MPI_INC=${MPI_PATH}/include
MPICC=${MPI_PATH}/bin/mpicc
MPIF77=${MPI_PATH}/bin/mpif77
O=$($MPI_PATH/bin/mpirun -V 2>&1 | head -1)
info "  Using MPI: ${O}"
# need this for BLACS openmpi fix
[[ ${O} =~ "Open MPI" ]] && MPI="openmpi" && info "    setting MPI variable to match: ${MPI}"
info "  using ${MPI_PATH}/lib/libmpi.so"
} # /build_mpi

# = build_openblas =
function build_openblas() { # TODO
    echo "openblas is not implemented yet"
  } # /build_openblas
 
# = build_cilk =
function build_cilk() {
  info "CILK"
  cd ${S}
  rm -rf ${S}/taucs
  get_and_unpack taucs http://www.tau.ac.il/~stoledo/taucs/$TAUCS_VER/taucs.tgz
  cd ${S}/taucs
  info "  configure"
  C=${S}/taucs/config/linux.mk
#  LIBS = $(LIBLAPACK) $(LIBBLAS) $(LIBMETIS) $(LIBF77) $(LIBC)
  sed -i "s/^LIBBLAS.*/LIBBLAS = ${BLAS_DLIB//\//\\/}/" $C
  sed -i "s/^LIBLAPACK.*/LIBLAPACK = ${LAPACK_DLIB//\//\\/}/" $C
  sed -i "s/^LIBMETIS.*/LIBMETIS = ${METIS_DLIB//\//\\/}/" $C
#  sed -i "s/^LIBF77.*/LIBF77 = /" $C # TODO
  info "  build"
  ./configure
  make

if [[ -n $CILK_REQUIRED ]]; then
  info "CILK for TAUCS not implemented yet" # TODO
fi
} # /build_cilk

# matrix tools:
# get blas (atlas, netlib, goto, mkl, acml, parblas)
#   -- which are openMP? atlas -- need to disable or messes up scheduling??

# = build_blas
function build_blas() {
  info "BLAS"
  BLAS_LIB=${INSTALL_LIB_DIR}/libblas.a
  cd ${S}
  case ${BLAS} in
    "atlas" )
      get_and_unpack blas http://sourceforge.net/projects/math-atlas/files/Stable/${ATLAS_BLAS_VER}/atlas${ATLAS_BLAS_VER}.tar.gz
      cd ${S}/blas/atlas-${ATLAS_BLAS_VER} || err blas "wrong dir"
      mkdir build-${MACHINE} # build dir
      BUILD_DIR=${S}/blas/atlas-${ATLAS_BLAS_VER}/build-${MACHINE}
      cd ${BUILD_DIR}
   #TODO   # turn off throttling
      #/usr/bin/cpufreq-selector -g performance
      #cp /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor \
      #      /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor
      # OR disable throttling check: ./configure -Si cputhrchk 0
      #../configure  -b 64 -D c -DPentiumCPS=2400 --prefix=/home/whaley/lib/atlas
      # TODO config options
      info "  configure"
      ../configure  -b 64 -D c --prefix=${INSTALL_LIB_DIR}
      info "  build"
      ${MAKE} build || err blas "build failed"
      info "  check"
      ${MAKE} check || err blas "check failed"
      info "  time"
      ${MAKE} time  || err blas "time failed"
      info " install"
      ${MAKE} install || err blas "install failed"
    ;;
    "netlib" )
      get_and_unpack blas http://www.netlib.org/blas/blas.tgz
      cd ${S}/blas/BLAS
      sed -i s/_LINUX/-${MACHINE}/ make.inc
      sed -i s/g77/gfortran/ make.inc
      sed -i "s/\(^OPTS *=\) .*/\1 -O3 -fPIC/" make.inc
      info "  build"
      ${MAKE} all &> /dev/null || err blas "build failed"
      cp blas-${MACHINE}.a  ${INSTALL_LIB_DIR}/libblas.a
      a2so ${INSTALL_LIB_DIR}/libblas.a -lgfortran -lm
      BLAS_LIB=${INSTALL_LIB_DIR}/libblas.a
    ;;
    *) err ${BLAS} "bad blas choice";;
  esac

# find blas install dir
find_library blas
BLAS_PATH=$libpath
BLAS_DLIB="-L${BLAS_PATH} -lblas"
#if [[ -f ${BLAS_PATH}/libblas.so  ]]; then
#  BLAS_DLIB="${BLAS_DLIB} -lblas"
#  info "  using ${BLAS_PATH}/libblas.so"
#elif [[ ${INSTALL_LIB_DIR}/libopenblas.so  ]]; then
#  BLAS_DLIB="${BLAS_DLIB} -lopenblas"
#  info "  using ${BLAS_PATH}/libopenblas.so"
#fi
} # /build_blas

# = build_lapack =
function build_lapack() {
  info "LAPACK"
  LAPACK_LIB=${INSTALL_LIB_DIR}/liblapack.a
  cd ${S}
  case ${LAPACK} in
    "netlib" )
      get_and_unpack lapack http://www.netlib.org/lapack/lapack-${LAPACK_VER}.tgz
      # compile blas
      cd ${S}/lapack/lapack-${LAPACK_VER} || err lapack "unexpected version"
      cp INSTALL/make.inc.gfortran make.inc
      sed -i s/_LINUX/-${MACHINE}/ make.inc
      sed -i "s/\(^OPTS.*=\).*/\1 -O2 -fPIC/" make.inc
      sed -i "s/\(^NOOPT.*=\).*/\1 -O0 -fPIC/" make.inc
      sed -i "s/^\(BLASLIB *=\).*/\1 -Wl,-rpath,${BLAS_PATH//\//\\/} ${BLAS_DLIB//\//\\/}/" make.inc
      info "  build"
      ${MAKE} all > /dev/null || err lapack "build failed"
      cp lapack-${MACHINE}.a  ${INSTALL_LIB_DIR}/liblapack.a
      a2so ${INSTALL_LIB_DIR}/liblapack.a ${BLAS_DLIB} -lgfortran -lm
      LAPACK_LIB=${INSTALL_LIB_DIR}/liblapack.a
    ;;
    "local" )
      find_library lapack
      LAPACK_LIB=$libpath
    ;;
    *) err ${LAPACK} "bad lapack choice";;
  esac

if [[ -f ${INSTALL_LIB_DIR}/liblapack.so ]]; then
  LAPACK_PATH=${INSTALL_LIB_DIR}
else
  find_library lapack
  LAPACK_PATH=$libpath
fi
[[ ! -f ${LAPACK_PATH}/liblapack.so ]] && err lapack "can't find liblapack.so at ${LAPACK_PATH}"
LAPACK_DLIB="-L${LAPACK_PATH} -llapack"
info "  using ${LAPACK_PATH}/liblapack.so"
} # /build_lapack

# = build_scalapack =
function build_scalapack() {
  # get ScaLAPACK
  # Note: ScaLAPACK breaks on parallel build
  MAKE_SAVE=${MAKE}
  MAKE="make"

  info "ScaLAPACK"
  cd ${S}
  get_and_unpack scalapack http://www.netlib.org/scalapack/scalapack.tgz
  # compile ScaLAPACK
  # now at scalapack-2.0 but no version number
  # note: no longer requires BLACS (its built in)
  cd ${S}/scalapack/scalapack || err scalapack "unexpected version"
  cp SLmake.inc.example SLmake.inc
#  sed -i "s/\(^home *=\) .*/\1 ${PWD//\//\\/}/" SLmake.inc
#  sed -i "s/\(^PLAT *=\) .*/\1 ${MACHINE}/" SLmake.inc
#  sed -i "s/\(^BLACSdir *=\) .*/\1 ${BLACS_PATH//\//\\/}/" SLmake.inc
#  sed -i "s/\(^SMPLIB *=\) .*/\1 ${MPI_DLIB//\//\\/}/" SLmake.inc
#  sed -i "s/-p4//" SLmake.inc # fix BLACS library names
    #TODO and convert from .a -> .so?
  sed -i "s/mpif90/${MPI_PATH//\//\\/}\/bin\/mpif90/" SLmake.inc
  sed -i "s/mpicc/${MPI_PATH//\//\\/}\/bin\/mpicc/" SLmake.inc
  sed -i "s/\(^NOOPT.*=\) .*/\1 -O0 -fPIC/" SLmake.inc
  sed -i "s/\(^CCFLAGS.*=\) .*/\1 -O3 -fPIC/" SLmake.inc
  sed -i "s/\(^FCFLAGS.*=\) .*/\1 -O3 -fPIC/" SLmake.inc
  sed -i "s/\(^BLASLIB *=\) .*/\1 ${BLAS_DLIB//\//\\/}/" SLmake.inc
  sed -i "s/\(^LAPACKLIB *=\) .*/\1 ${LAPACK_DLIB//\//\\/}/" SLmake.inc
# sed -i "s/\(^BLACSFINIT *=\) .*/\1 ${BLACSF_DLIB//\//\\/}/" SLmake.inc
# sed -i "s/\(^BLACSCINIT *=\) .*/\1 ${BLACSC_DLIB//\//\\/}/" SLmake.inc
# sed -i "s/\(^BLACSLIB *=\) .*/\1 /" SLmake.inc
  sed -i "s/\(^CDEFS.*=\) .*/\1 -DAdd_ -DNO_IEEE \$(USEMPI)/" SLmake.inc
  info "  build"
  ${MAKE} lib > /dev/null || err scalapack "build failed"
  cp libscalapack.a  ${INSTALL_LIB_DIR}
#  a2so ${INSTALL_LIB_DIR}/libscalapack.a ${LAPACK_DLIB} ${BLAS_DLIB} ${BLACSC_DLIB} -lgfortran -lm
  # need muldefs for BLACS
  a2so ${INSTALL_LIB_DIR}/libscalapack.a -Wl,-z,muldefs ${LAPACK_DLIB} ${BLAS_DLIB} ${MPI_DLIB} -lgfortran -lm

  MAKE=${MAKE_SAVE}

find_library scalapack
SCALAPACK_PATH=$libpath
info "  using ${SCALAPACK_PATH}/libscalapack.so"
SCALAPACK_DLIB="-L${SCALAPACK_PATH} -lscalapack"
} # /build_scalapack

# = build_cblas =
function build_cblas() {
  err cblas "Not implemented as of now." # TODO
} # /build_cblas

# = build_combblas =
function build_combblas() {
  info "CombBLAS"
  get_and_unpack combblas http://eecs.berkeley.edu/~aydin/CombBLAS_FILES/CombBLAS_${COMBBLAS_VERSION}.tgz
  cd combblas/CombBLAS_${COMBBLAS_VERSION}
  mkdir _build
  mkdir _install
  cd _build
  info "  configuring .."
  CC=mpicc CXX=mpicxx cmake .. -DCMAKE_INSTALL_PREFIX=../_install &> /dev/null || err combblas "configuring failed"
  info "  building .."
  make &> /dev/null || err combblas "build failed"
  info "  installing .."
  make install &> /dev/null || err combblas "install failed"
  a2so ${S}/combblas/CombBLAS_${COMBBLAS_VERSION}/_install/lib/libCombBLAS.a -lm
  cp -f ${S}/combblas/CombBLAS_${COMBBLAS_VERSION}/_install/lib/*.so ${INSTALL_LIB_DIR} &> /dev/null || err combblas "install failed"
  cp -rf ${S}/combblas/CombBLAS_${COMBBLAS_VERSION}/_install/include/* ${INSTALL_INC_DIR} &> /dev/null || err combblas "install failed"
  # fix some paths for SuperLU
  mv -f ${INSTALL_INC_DIR}/psort ${INSTALL_INC_DIR}/CombBLAS &> /dev/null || err combblas "install failed"
  mv -f ${INSTALL_INC_DIR}/usort ${INSTALL_INC_DIR}/CombBLAS &> /dev/null || err combblas "install failed"
  mv -f ${INSTALL_INC_DIR}/Tommy ${INSTALL_INC_DIR}/CombBLAS &> /dev/null || err combblas "install failed"
  mv -f ${INSTALL_INC_DIR}/graph500 ${INSTALL_INC_DIR}/CombBLAS &> /dev/null || err combblas "install failed"
  mv -f $S/combblas/CombBLAS_${COMBBLAS_VERSION}/BipartiteMatchings ${INSTALL_INC_DIR}/CombBLAS &> /dev/null || err combblas "install failed"
} # /build_combblas

# == ORDERINGS BUILD FUNCTIONS ==
# = build_amd =
function build_amd() {
  info "AMD"
  get_and_unpack amd http://www.cise.ufl.edu/research/sparse/amd/AMD-${AMD_VER}.tar.gz
  get_and_unpack amd http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz
  cd ${S}/amd/AMD || err amd "bad dir"
  echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
  sed -i '/CC/d' ../UFconfig/UFconfig.mk
  info "  build"
  ${MAKE} lib &> /dev/null || err amd "build failed"
  cp Include/amd.h ${INSTALL_INC_DIR}/
  cp Include/amd_internal.h ${INSTALL_INC_DIR}/
  cp Lib/libamd.a  ${INSTALL_LIB_DIR}/
  a2so ${INSTALL_LIB_DIR}/libamd.a -lm

  info "CAMD"
  get_and_unpack camd http://www.cise.ufl.edu/research/sparse/camd/CAMD-${CAMD_VER}.tar.gz
  get_and_unpack camd http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz
  cd ${S}/camd/CAMD || err camd "bad dir"
  echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
  sed -i '/CC/d' ../UFconfig/UFconfig.mk
  info "  build"
  ${MAKE} lib &> /dev/null || err camd "build failed"
  cp Include/camd.h ${INSTALL_INC_DIR}/
  cp Lib/libcamd.a  ${INSTALL_LIB_DIR}/
  a2so ${INSTALL_LIB_DIR}/libcamd.a -lm

find_library amd
AMD_DLIB="-L$libpath -lamd"
find_library camd
CAMD_DLIB="-L$libpath -lcamd"

} # /build amd

# = build_ccolamd =
function build_ccolamd() {
  info "CCOLAMD"
  get_and_unpack ccolamd http://www.cise.ufl.edu/research/sparse/ccolamd/CCOLAMD-${CCOLAMD_VER}.tar.gz
  get_and_unpack ccolamd http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz
  cd ${S}/ccolamd/CCOLAMD || err ccolamd "bad dir"
  echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
  sed -i '/CC/d' ../UFconfig/UFconfig.mk
  info "  build"
  ${MAKE} lib &> /dev/null || err ccolamd "build failed"
  cp Include/ccolamd.h ${INSTALL_INC_DIR}/
  cp Lib/libccolamd.a  ${INSTALL_LIB_DIR}/
  a2so ${INSTALL_LIB_DIR}/libccolamd.a -lm

find_library ccolamd
CCOLAMD_DLIB="-L$libpath -lccolamd"
info "  using $libpath/libccolamd.so"
} # /build_ccolamd
 
# = build_colamd =
function build_colamd() {
  info "COLAMD"
  get_and_unpack colamd http://www.cise.ufl.edu/research/sparse/colamd/COLAMD-${COLAMD_VER}.tar.gz
  get_and_unpack colamd http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz
  cd ${S}/colamd/COLAMD || err colamd "bad dir"
  echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
  sed -i '/CC/d' ../UFconfig/UFconfig.mk
  info "  build"
  ${MAKE} lib &> /dev/null || err colamd "build failed"
  cp Include/colamd.h ${INSTALL_INC_DIR}/
  cp Lib/libcolamd.a  ${INSTALL_LIB_DIR}/
  a2so ${INSTALL_LIB_DIR}/libcolamd.a -lm

find_library colamd
COLAMD_DLIB="-L$libpath -lcolamd"
info "  using $libpath/libcolamd.so"
} # /build_colamd

# = build_metis =
function build_metis() {
  case ${METIS} in
    "parmetis" )
      info "ParMETIS"
      get_and_unpack metis http://glaros.dtc.umn.edu/gkhome/fetch/sw/parmetis/OLD/ParMetis-${PARMETIS_VER}.tar.gz
      cd ${S}/metis/ParMetis-${PARMETIS_VER} || err metis "bad dir"
      sed -i "s/\(^CC *=\) .*/\1 ${MPICC//\//\\/}/" Makefile.in
      sed -i "s/\(^COPTIONS *= \).*/\1 -DNDEBUG -fPIC/" Makefile.in
      info "  build"
      ${MAKE} &> /dev/null || err "build failed"
      cp parmetis.h     ${INSTALL_INC_DIR}/
      for i in libmetis.a libparmetis.a; do
      cp ${i} ${INSTALL_LIB_DIR}/
      done
      a2so ${INSTALL_LIB_DIR}/libmetis.a -lm
      a2so ${INSTALL_LIB_DIR}/libparmetis.a -L${INSTALL_LIB_DIR} -lmetis ${MPI_DLIB}
    ;;
    "metis" )
      info "METIS"
      get_and_unpack metis http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/metis-${METIS_VER}.tar.gz
      cd ${S}/metis/metis-${METIS_VER} || err metis "bad dir"
      sed -i "s/\(^COPTIONS *= \).*/\1 -DNDEBUG -fPIC/" Makefile.in
      sed -i '/CC/d' Makefile.in
      # for some reason metis redefines log2_local -- its in glibc
      sed -i "s/log2_local\([^_]\)/log2_local\1/g" $(grep -lr log2_local .)
      sed -i "s/log2_local\$/log2_local/g" $(grep -lr log2_local .)
      info "  build"
      ${MAKE} &> /dev/null || err metis "build failed"
      cp libmetis.a ${INSTALL_LIB_DIR}/
      a2so ${INSTALL_LIB_DIR}/libmetis.a -lm
    ;;
    * ) err metis "bad selection - ${METIS}";;
  esac
# find blas install dir, prefer local install
if [[ -f ${INSTALL_LIB_DIR}/lib${METIS}.so ]]; then
  METIS_PATH=${INSTALL_LIB_DIR}
else
  METIS_PATH=/usr/lib
fi
[[ ! -f ${METIS_PATH}/lib${METIS}.so ]] && err metis "can't find lib${METIS}.so at ${METIS_PATH}"
METIS_DLIB="-L${METIS_PATH} -l${METIS}"
[[ "$METIS" == "parmetis" ]] && METIS_DLIB="${METIS_DLIB} -lmetis ${MPI_DLIB}"
info "  using ${METIS_PATH}/lib${METIS}.so"
} # /build_metis

# = build_scotch =
function build_scotch() {
  # Note: parallel make broken for esmumps releases
  info "pt-SCOTCH/SCOTCH"
  get_and_unpack scotch https://gforge.inria.fr/frs/download.php/27584/scotch_${SCOTCH_VER}_esmumps.tar.gz
  cd ${S}/scotch/scotch_${SCOTCH_VER}_esmumps || err scotch "bad dir"
  cd src
  cp Make.inc/Makefile.inc.x86-64_pc_linux2 Makefile.inc
  sed -i "s/\(^CFLAGS.*= *-O3\)/\1 -fPIC -I${MPI_INC//\//\\/}/" Makefile.inc
  sed -i "s/\(^CCP.*=\).*/\1 ${MPICC//\//\\/}/" Makefile.inc
  info "  build"
  MAKE_SAVE=${MAKE}
  MAKE=make
  ${MAKE} ptscotch &> /dev/null || err scotch "ptscotch build failed"
  MAKE=${MAKE_SAVE}
  info "  install"
  ${MAKE} prefix=${INSTALL_BASE_DIR} install &> /dev/null || err scotch "install failed"
  cp ../lib/*mumps.a ${INSTALL_LIB_DIR}/
  a2so ${INSTALL_LIB_DIR}/libptscotcherr.a ${MPI_DLIB}
  a2so ${INSTALL_LIB_DIR}/libptscotch.a -L${INSTALL_LIB_DIR} -lptscotcherr ${MPI_DLIB} -lz
  a2so ${INSTALL_LIB_DIR}/libptesmumps.a -L${INSTALL_LIB_DIR} -lptscotch
find_library ptscotch
PTSCOTCH_DLIB="-L$libpath -lptscotch -lptesmumps"
info "  using $libpath/libptscotch.so"
} # /build_scotch

# TODO get AMF
# Note: PORD is included in MUMPS

# === BUILD SOLVERS ===
# = build_cholmod =
function build_cholmod() {

  info "CHOLMOD"
  
  # unpack archives
  get_and_unpack cholmod http://www.cise.ufl.edu/research/sparse/cholmod/CHOLMOD-${CHOLMOD_VER}.tar.gz
  get_and_unpack cholmod http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz

  info "  config"

  # cholmod needs metis 
  find_library metis
  metis_libpath=$libpath

  cd ${S}/cholmod; mkdir -p AMD; cd AMD; ln -s ${INSTALL_INC_DIR} Include
  cd ${S}/cholmod; mkdir -p COLAMD; cd COLAMD; ln -s ${INSTALL_INC_DIR} Include
  cd ${S}/cholmod; mkdir -p CCOLAMD; cd CCOLAMD; ln -s ${INSTALL_INC_DIR} Include
  cd ${S}/cholmod; mkdir -p CAMD; cd CAMD; ln -s ${INSTALL_INC_DIR} Include
  cd ${S}/cholmod/CHOLMOD || err cholmod "bad dir"
  echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
  sed -i "s/METIS_PATH =/METIS_PATH=$metis_libpath/libmetis.so/" ../UFconfig/UFconfig.mk
  sed -i "s/METIS =/METIS=$metis_libpath/libmetis.so/" ../UFconfig/UFconfig.mk
  sed -i '/CC/d' ../UFconfig/UFconfig.mk
  info "  build"
  ${MAKE} library &> /dev/null || err cholmod "build failed"
  cp Include/cholmod*.h ${INSTALL_INC_DIR}/
  cp Lib/libcholmod.a  ${INSTALL_LIB_DIR}/
  a2so ${INSTALL_LIB_DIR}/libcholmod.a ${AMD_DLIB} ${CAMD_DLIB} ${METIS_DLIB} ${BLAS_DLIB} ${CCOLAMD_DLIB} ${COLAMD_DLIB} ${LAPACK_DLIB} -lm
#  find_library cholmod
#  CHOLMOD_DLIB="-L$libpath -lcholmod"
#  info "  using $libpath/libcholmod.so"
} # /build_umfpack

# = build_umfpack =
function build_umfpack() {
  info "UMFPACK"
  rm -rf umfpack # doing this twice breaks things, so delete any old version before starting again
  get_and_unpack umfpack http://www.cise.ufl.edu/research/sparse/umfpack/UMFPACK-${UMFPACK_VER}.tar.gz
  get_and_unpack umfpack http://www.cise.ufl.edu/research/sparse/UFconfig/UFconfig-${UFPACK_VER}.tar.gz
  info "  config"
  cd ${S}/umfpack; mkdir AMD; cd AMD; ln -s ${INSTALL_INC_DIR} Include
  cd ${S}/umfpack; mkdir CCOLAMD; cd CCOLAMD; ln -s ${INSTALL_INC_DIR} Include
  cd ${S}/umfpack; mkdir CAMD; cd CAMD; ln -s ${INSTALL_INC_DIR} Include
  cd ${S}/umfpack; mkdir CHOLMOD; cd CHOLMOD; ln -s ${INSTALL_INC_DIR} Include
  cd ${S}/umfpack; mkdir metis-4.0; cd metis-4.0; ln -s ${INSTALL_INC_DIR} Lib
  cd ${S}/umfpack/UMFPACK || err amd "bad dir"
  echo "CFLAGS = -O3 -fexceptions -fPIC" >> ../UFconfig/UFconfig.mk
  sed -i '/CC/d' ../UFconfig/UFconfig.mk
  info "  build"
  cd ${S}/umfpack/UMFPACK/Lib
  ${MAKE} -f Makefile &> /dev/null || err umfpack "build failed"
  cd ${S}/umfpack/UMFPACK
  cp ../UFconfig/UFconfig.h ${INSTALL_INC_DIR}/
  cp Include/umfpack*.h ${INSTALL_INC_DIR}/
  cp Lib/libumfpack.a  ${INSTALL_LIB_DIR}/
  a2so ${INSTALL_LIB_DIR}/libumfpack.a ${CHOLMOD_DLIB} -lm
} # /build_umfpack

# = build_mumps =
function build_mumps() {
  # get mumps
  info "MUMPS"
  get_and_unpack mumps http://mumps.enseeiht.fr/MUMPS_${MUMPS_VER}.tar.gz
  # TODO currently only for INTEL
  cd ${S}/mumps/MUMPS_${MUMPS_VER}
  cp Make.inc/Makefile.INTEL.PAR ./Makefile.inc
  sed -i "s/\(^PLAT *=\) .*/\1 ${MACHINE}/" Makefile.inc
  sed -i "s/\(^CC *=\) .*/\1 ${MPICC//\//\\/}/"  Makefile.inc
  sed -i "s/\(^FC *=\) .*/\1 ${MPIF77//\//\\/}/" Makefile.inc
  sed -i "s/\(^FL *=\) .*/\1 ${MPIF77//\//\\/}/" Makefile.inc
  sed -i "s/\(^RANLIB *=\) .*/\1 ranlib/" Makefile.inc
  # libscalapack.a blacs_MPI-LINUX-0.a blacsF77init_MPI-LINUX-0.a
  sed -i "s/\(^SCALAP *=\) .*/\1 ${SCALAPACK_DLIB//\//\\/} ${BLACSF_DLIB//\//\\/}/" Makefile.inc
  sed -i "s/\(^INCPAR *=\) .*/\1 -I${INSTALL_INC_DIR//\//\\/} -I${MPI_INC//\//\\/}/" Makefile.inc
  # -llammpio -llamf77mpi -lmpi -llam
  sed -i "s/\(^LIBPAR *=\) .*/\1 \$(SCALAP) -L${INSTALL_LIB_DIR//\//\\/} -lutil -ldl -lpthread/" Makefile.inc
  sed -i "s/\(^LIBBLAS *=\) .*/\1 -L${BLAS_DLIB//\//\\/}/" Makefile.inc

  # update for AMD, METIS/parMETIS, SCOTCH/ptSCOTCH
  sed -i "s/^#SCOTCHDIR.*/SCOTCHDIR = ${INSTALL_BASE_DIR//\//\\/}/" Makefile.inc
  sed -i "s/^#ISCOTCH/ISCOTCH/" Makefile.inc
  sed -i "s/^#LSCOTCH/LSCOTCH/" Makefile.inc

  sed -i "s/^#LMETISDIR.*/LMETISDIR = ${INSTALL_LIB_DIR//\//\\/}/" Makefile.inc
  sed -i "s/^#LMETIS/LMETIS/" Makefile.inc

  sed -i "s/^ORDERINGSF.*/ORDERINGSF = -Dscotch -Dmetis -Dpord -Dptscotch -D${METIS}/" Makefile.inc
  sed -i "s/^\(OPT.*=\) /\1 -fPIC /" Makefile.inc
  sed -i "s/^\(OPTL.*=\).*/\1 -fPIC/" Makefile.inc #-nofor_main seems to break here
  sed -i "s/^\(OPTF.*=\).*/\1 -fPIC -O -Dintel_ -DALLOW_NON_INIT/" Makefile.inc #-nofor_main seems to break here

  # TODO configure links to dependancies, vars: LIBBLAS, SCALAP, INCPAR, LIBPAR
  # d: double precision real (default), c: complex double, s: single precision real, z: single precision complex
  info "  build"
  #${MAKE} d > /dev/null || err mumps "build failed"
  ${MAKE} s d c z &> /dev/null || err mumps "build failed"
  # install MUMPS
  for i in lib/lib?mumps.a lib/libmumps_common.a lib/libpord.a include/*.h; do
    cp $i ${INSTALL_BASE_DIR}/$i
  done
  a2so ${INSTALL_LIB_DIR}/libpord.a
  a2so ${INSTALL_LIB_DIR}/libmumps_common.a -L${INSTALL_LIB_DIR} -lpord ${METIS_DLIB} ${PTSCOTCH_DLIB} ${MPI_DLIB} -lmpi_f77 -lgfortran -lm
  for i in s d c z; do
    a2so ${INSTALL_LIB_DIR}/lib${i}mumps.a -L${INSTALL_LIB_DIR} -lmumps_common ${SCALAPACK_DLIB}
  done
} # /build_mumps

# = build_pardiso =
function build_pardiso() {
  PARDISO_VER=4.1.1
  info "Pardiso ${PARDISO_VER}"
  F=${S}/dl/libpardiso411-GNU430-X86-64.so
  PARDISO_LIB=libpardiso
  if [[ ! -f ${F} ]]; then
    echo "  Need to download tar.gz from http://www.pardiso-project.org/branch (licensing required)"
  else
    [[ ! -f ${HOME}/pardiso.lic ]] && [[ ! -f ./pardiso.lic ]] && \
      echo "  Make sure license (pardiso.lic) is in home directory or working directory."
    cp ${F} ${INSTALL_LIB_DIR}/${PARDISO_LIB}-${PARDISO_VER}.so
    chmod +x ${INSTALL_LIB_DIR}/${PARDISO_LIB}-${PARDISO_VER}.so
    cd ${INSTALL_LIB_DIR}
    ln -sf ${PARDISO_LIB}-${PARDISO_VER}.so ${PARDISO_LIB}.so
    # TODO add -rpath and dependencies: blas, lapack, mpi?
  fi
} # /build_pardiso

# = build_wsmp =
# tar or file
function build_wsmp() {
WSMP_SRC=file
  info "WSMP"
  [[ $WSMP_SRC == "tar"  ]] && F=${S}/dl/wsmp-Linux64.tar.gz
  [[ $WSMP_SRC == "file" ]] && F=${S}/dl/libpwsmpGNU64ompi.a.gz
  if [[ ! -f ${F} ]]; then
    echo "  Need to download tar.gz from http://www-users.cs.umn.edu/~agupta/wsmp.html (licensing required)"
  else
    rm -rf ${S}/wsmp
    cd ${S}
    if [[ $WSMP_SRC == "tar"  ]]; then
      tar zxvf $F > /dev/null
      cd ${S}/wsmp/wsmp-Linux64
      echo -n "*   "
      cat VERSION | head -1
      [[ ! -f ${HOME}/wsmp.lic ]] && [[ ! -f ${S}/wsmp.lic ]] && cp wsmp.lic ${S}/
    else
      mkdir wsmp
      cd ${S}/wsmp
      cp $F .
      gunzip libpwsmpGNU64ompi.a.gz
    fi
    # getting "undefined reference to `__isoc99_sscanf'": add -D_GNU_SOURCE
    LIBS="-D_GNU_SOURCE ${BLAS_DLIB} -L${MPI_PATH}/lib -lmpi_f77"
    if [[ ${MPI} == "openmpi" ]]; then
      info "  selected OpenMPI version of libpwsmp"
      [[ $WSMP_SRC == "tar"  ]] && cp ${S}/wsmp/wsmp-Linux64/lib/GNU/openmpi/libpwsmp64.a ${INSTALL_LIB_DIR}/libpwsmp-openmpi-64b.a
      [[ $WSMP_SRC == "file" ]] && cp ${S}/wsmp/libpwsmpGNU64ompi.a ${INSTALL_LIB_DIR}/libpwsmp-openmpi-64b.a
      a2so ${INSTALL_LIB_DIR}/libpwsmp-openmpi-64b.a ${LIBS}
      cd ${INSTALL_LIB_DIR}
      ln -sf libpwsmp-openmpi-64b.so libpwsmp.so
    else
       err wsmp "not a working version... TODO"
    fi
    info "  installed libwsmp"
  fi
} # /build_wsmp

# = build_taucs =
function build_taucs() {
  info "TAUCS"
  cd ${S}
  rm -rf ${S}/taucs
  get_and_unpack taucs http://www.tau.ac.il/~stoledo/taucs/$TAUCS_VER/taucs.tgz
  cd ${S}/taucs
  info "  patch"
  C=${S}/taucs/config/linux.mk
  sed -i "s/^FC.*/FC = gfortran/" $C # was g77
  sed -i "s/^CFLAGS.*/CFLAGS = -O3 -fPIC -fexceptions -D_GNU_SOURCE/" $C
  sed -i "s/^FFLAGS.*/FFLAGS = -O3 -fPIC -fno-second-underscore/" $C
  sed -i "s/^LDFLAGS.*/LDFLAGS = -Wl,-rpath,${INSTALL_LIB_DIR//\//\\/}/" $C
  sed -i "s/^LIBBLAS.*/LIBBLAS = ${BLAS_DLIB//\//\\/}/" $C
  sed -i "s/^LIBLAPACK.*/LIBLAPACK = ${LAPACK_DLIB//\//\\/}/" $C
  sed -i "s/^LIBMETIS.*/LIBMETIS = ${METIS_DLIB//\//\\/}/" $C
  sed -i "s/^LIBF77.*/LIBF77 = -lgfortran/" $C # was -lg2c
#  sed -i "s/^LIBC.*/LIBC = -lm/" $C # was -lm
  # and remove a stray printf that snuck in to his code, and fix a problem with uninitialized memory (valgrind)
  cat > taucs_ooc_lu.patch <<EOF
--- a/src/taucs_ccs_ooc_lu.c    2011-03-02 03:24:02.000000000 -0500
+++ b/src/taucs_ccs_ooc_lu.c	2011-03-02 03:25:00.000000000 -0500
@@ -2390,10 +2390,12 @@
     panel_spa = (taucs_datatype*)taucs_malloc(spawidth*nrows*sizeof(taucs_datatype));
     panel_spamap = (char*)taucs_malloc(spawidth*nrows*sizeof(char) );
     assert(panel_spa && panel_spamap);
+    memset(panel_spamap, 0, spawidth*nrows*sizeof(char));
 #else
     panel_spa = (taucs_datatype**) taucs_malloc(spawidth*sizeof(taucs_datatype*));
     panel_spamap = (char**) taucs_malloc(spawidth*sizeof(char*) );
     assert(panel_spa && panel_spamap);
+    memset(panel_spamap, 0, spawidth*sizeof(char));
 #endif
   }

@@ -3936,7 +3938,7 @@

   taucs_io_read(LU, HEADER_FLAGS, 1, 1, TAUCS_INT, &flags);

-  printf("taucs_ooc_solve_lu: starting, DZSC=%d%d%d%d\n",
+  taucs_printf("taucs_ooc_solve_lu: starting, DZSC=%d%d%d%d\n",
 	 (flags & TAUCS_DOUBLE  ) != 0,
 	 (flags & TAUCS_DCOMPLEX) != 0,
 	 (flags & TAUCS_SINGLE  ) != 0,
EOF
  patch -p 1 -i taucs_ooc_lu.patch
  # TODO need to strip out amd, colamd from compile, select solvers, data types (see doc/)
  info "  configure"
  ./configure &> /dev/null || err taucs "configure failed"
  info "  build"
  ${MAKE} &> /dev/null || err taucs "make failed"
  info "  install"
  cp ${S}/taucs/lib/linux/libtaucs.a ${INSTALL_LIB_DIR}/
  a2so ${INSTALL_LIB_DIR}/libtaucs.a ${BLAS_DLIB} ${LAPACK_DLIB} ${METIS_DLIB}
  cp ${S}/taucs/build/linux/*.h ${INSTALL_INC_DIR}/
  cp ${S}/taucs/src/taucs*.h ${INSTALL_INC_DIR}/
} # /build_taucs

# = build_superlu =
function build_superlu() {
  # get superlu
  info "SuperLU"
  get_and_unpack superlu https://crd-legacy.lbl.gov/~xiaoye/SuperLU/superlu_${SUPERLU_VER}.tar.gz
  cd ${S}/superlu/SuperLU_${SUPERLU_VER}
  #   The following CPP definitions can be set in CFLAGS.
  #      * -D_LONGINT
  #        use 64-bit integers for indexing sparse matrices. (default is 32 bit)
  #      * -DPRNTlevel=[0,1,2,...]
  #        printing level to show solver's execution details. (default is 0)
  #      * -DDEBUGlevel=[0,1,2,...]
  #        diagnostic printing level for debugging purpose. (default is 0)
  # rename wrong variable F90FLAGS -> FFLAGS (FFLAGS is used in the actual makefiles...)
  #sed -i "s/\(^F90FLAGS.*=\).*/FFLAGS = -fPIC/"  make.inc
  #sed -i "s/\(^LOADER.*=\).*/\1 ${MPIF77//\//\\/}/" make.inc
  #sed -i "s/\(^LOADOPTS.*=\).*/\1 -fPIC/"  make.inc
  #   The possible options for CDEFS are:
  #     * -DAdd_: Fortran expects a C routine to have an underscore
  #               postfixed to the name;
  #     * -DNoChange: Fortran expects a C routine name to be identical to
  #                   that compiled by C;
  #     * -DUpCase: Fortran expects a C routine name to be all uppercase.
  #sed -i "s/\(^CDEFS.*=\).*/\1 -DAdd__/"  make.inc
  # d: double precision real (default), c: complex double, s: single precision real, z: single precision complex'
  info "  configure .."
  mkdir build; cd build
  cmake ..
  info "  build .."
  ${MAKE} &> /dev/null || err superlu "build failed"
  info "  install .."
  #a2so ${INSTALL_LIB_DIR}/libsuperlu_dist_${SUPERLU_VER}.a -L${INSTALL_LIB_DIR} ${METIS_DLIB} ${BLAS_DLIB}
  cd ${INSTALL_LIB_DIR} && ln -sf libsuperlu_${SUPERLU_VER}.a libsuperlu.a
  chmod -x ${S}/superlu/SuperLU_${SUPERLU_VER}/SRC/*.h
  cp ${S}/superlu/SuperLU_${SUPERLU_VER}/SRC/*.h ${INSTALL_INC_DIR}/
} # /build_superlu

# = build_superlu_dist =
function build_superlu_dist() {
  info "SuperLU_dist"
  get_and_unpack superlu_dist http://crd-legacy.lbl.gov/~xiaoye/SuperLU/superlu_dist_${SUPERLU_DIST_VERSION}.tar.gz

  superlu_dist_root=${S}/superlu_dist/SuperLU_DIST_${SUPERLU_DIST_VERSION}
  cd $superlu_dist_root

  # make superlu_dist happy
  cp $INSTALL_INC_DIR/CombBLAS/CombBLAS.h $superlu_dist_root
  cp $INSTALL_INC_DIR/CombBLAS/BipartiteMatchings/*.h $superlu_dist_root/SRC
  sed -i 's/-std=c++11/-std=c++14/g' $superlu_dist_root/CMakeLists.txt # set std to c++14
  sed -i 's/CMAKE_CXX_STANDARD 11/CMAKE_CXX_STANDARD 14/g' $superlu_dist_root/CMakeLists.txt # set std to c++14
  
  echo "  configuring .."
  # parmetis
  find_header parmetis
  parmetis_incpath=$incpath
  find_library parmetis 
  parmetis_libpath=$libpath

  # CombBLAS
  find_header CombBLAS
  combblas_incpath=$incpath
  find_library combblas
  combblas_libpath=$libpath
  
  # metis
  find_header metis
  metis_incpath=$incpath
  find_library metis
  metis_libpath=$libpath

  mkdir _build; cd _build;

  CC=mpicc CXX=mpicxx \
  CFLAGS="-I$metis_incpath" CXXFLAGS="-I$metis_incpath" \
  cmake .. \
    -Denable_tests=OFF\
    -DPTL_ENABLE_PARMETISLIB=ON \
    -DTPL_PARMETIS_INCLUDE_DIRS="$parmetis_incpath;$metis_incpath" \
    -DTPL_PARMETIS_LIBRARIES="$parmetis_libpath/libparmetis.so;$metis_libpath/libmetis.so" \
    -DTPL_ENABLE_COMBBLASLIB=ON \
    -DTPL_COMBBLAS_INCLUDE_DIRS="$combblas_incpath" \
    -DTPL_COMBBLAS_LIBRARIES="$combblas_libpath/libCombBLAS.a" \
    -DCMAKE_Fortran_COMPILER="gfortran" \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DCMAKE_INSTALL_PREFIX=${INSTALL_BASE_DIR} \
    -DCMAKE_EXE_LINKER_FLAGS="-lmetis" &> /dev/null || err superlu_dist "configuring failed"
  info "  building .."
  #make &> /dev/null || err superlu_dist "build failed"
  make V=1 || err superlu_dist "build failed"
  info "  installing .." # TODO
  cp $superlu_dist_root/_build/SRC/*.h $INSTALL_INC_DIR
  a2so $superlu_dist_root/_build/SRC/libsuperlu_dist.a -lm
  cp $superlu_dist_root/_build/SRC/*.so $INSTALL_LIB_DIR

} # /build_superlu_dist

# == I/O BUILD FUNCTIONS ==
# = build_bebop =
function build_bebop() {
  info "BeBOP Sparse Matrix Converter"
  get_and_unpack bebop http://bebop.cs.berkeley.edu/smc/tarballs/bebop_make.tar.gz
  get_and_unpack bebop http://bebop.cs.berkeley.edu/smc/tarballs/bebop_util.tar.gz
  get_and_unpack bebop http://bebop.cs.berkeley.edu/smc/tarballs/sparse_matrix_converter.tar.gz
  cd ${S}/bebop/bebop_make
  ln -s -f ./Makefile.include.linux ./Makefile.include
  # change the lpthread flag to pthread flag
  sed -i s/"LIBS += -lpthread"/"LIBS += -pthread"/ ./setup
  # include custom install lib dir
  sed -i "s/\(^LDFLAGS\)=.*/\1=-Wl,-rpath,${INSTALL_LIB_DIR//\//\\/}/" Makefile.include
  cd ${S}/bebop/bebop_util
  info "  build util lib"
  # TODO the -lpthread flag in tests/Makefile is at the wrong place how to fix this??
  #sed -i "s/\/dev\/random/\/dev\/urandom/" src/random_number.c # prevent blocking when not enough entropy
  make &> /dev/null || err bebop "util build failed"
  cd ${S}/bebop/sparse_matrix_converter
  info "  build sparse matrix converter"
  make &> /dev/null || err bebop "sparse matrix converter build failed"
  info "  install"
  cd ${S}/bebop/bebop_util
  cp -f libbebop_util.so ${INSTALL_LIB_DIR}
  cp ${S}/bebop/sparse_matrix_converter/sparse_matrix_converter ${INSTALL_BIN_DIR}/
  mkdir -p ${INSTALL_INC_DIR}/bebop/util
  mkdir -p ${INSTALL_INC_DIR}/bebop/smc
  cp ${S}/bebop/bebop_util/include/bebop/util/init.h ${INSTALL_INC_DIR}/bebop/util/
  cp ${S}/bebop/bebop_util/include/bebop/util/enumerations.h ${INSTALL_INC_DIR}/bebop/util/
  cp ${S}/bebop/sparse_matrix_converter/include/bebop/smc/*.h ${INSTALL_INC_DIR}/bebop/smc/
} # /build_bebop

# = build_matio =
function build_matio() {
  info "MAT File I/O Library"
  info "  cloning git repository ..."
  # the last release hasn't been in more than a year: use the git repo
  # git clone git://matio.git.sourceforge.net/gitroot/matio/matio ${S}/matio # what is this
  # delete if the dir exists
  if [ -d ./matio ]; then
    rm -rf matio
  fi
  git clone https://github.com/tbeu/matio.git &> /dev/null
  cd ${S}/matio
  info "  configuring ..."
  # wow: software that has been properly packaged! what are you talking about?
  # ./bootstrap || err matio "during executing bootstrap" # and what is this
  sh autogen.sh &> /dev/null || err matio "autogen"
  ./configure --prefix="${INSTALL_BASE_DIR}" --disable-static &> /dev/null || err matio "configure"
  info "  compiling ..."
  make &> /dev/null || err matio "make"
  # info "testing software ..."
  # make check &> /dev/null || err matio "check test failed"
  info "  installing ..."
  cd ${S}/matio/src 
  # don't quote paths with '...' 
  bash ../libtool --mode=install install -c libmatio.la ${INSTALL_LIB_DIR} &> /dev/null || err matio "installing libmatio.la"
  install -c .libs/libmatio.so.4.4.2 ${INSTALL_LIB_DIR}/libmatio.so.4.4.2  &> /dev/null || err matio "install libmatio.so"
  install -c -m 644 matio.h ${INSTALL_INC_DIR}  &> /dev/null || err matio "installing matio.h"
  install -c -m 644 matio_pubconf.h ${INSTALL_INC_DIR}  &> /dev/null || err matio "installing matio_pubconf.h"
  mkdir -p ${INSTALL_BIN_DIR}  &> /dev/null || err matio "installing - can't make dir"
#  bash ../libtool --mode=install install -c matdump ${INSTALL_BIN_DIR} || err matio "install" # TODO
  cd ${S}/matio/documentation
  mkdir -p ${INSTALL_BASE_DIR}/share/man/man3  &> /dev/null || err matio "can't make dir"
  install -c -m 644 Mat_Close.3 Mat_CreateVer.3 Mat_GetDir.3 Mat_GetFilename.3 Mat_GetLibraryVersion.3 Mat_GetVersion.3 Mat_Open.3 Mat_Rewind.3 Mat_VarAddStructField.3 Mat_VarCreate.3 Mat_VarCreateStruct.3 Mat_VarDelete.3 Mat_VarFree.3 Mat_VarGetNumberOfFields.3 Mat_VarGetSize.3 Mat_VarGetStructFieldnames.3 Mat_VarGetStructs.3 Mat_VarGetStructsLinear.3 Mat_VarRead.3 Mat_VarReadInfo.3 Mat_VarReadNext.3 Mat_VarReadNextInfo.3 Mat_VarPrint.3 Mat_VarWrite.3 Mat_VarWriteAppend.3 ${INSTALL_BASE_DIR}/share/man/man3  &> /dev/null || err matio "installing"
  cd ${S}/matio
  mkdir -p ${INSTALL_LIB_DIR}/pkgconfig  &> /dev/null || err matio "can't make dir"
  install -c -m 644 matio.pc ${INSTALL_LIB_DIR}/pkgconfig  &> /dev/null || err matio "installing pkgconfig"
} # /matio


########################################################################
# === MAIN === (if this was C, all of below would be main [sadly, it isn't C])
# == DISPLAY THE HELP TEXT == if the script was invoked without options
[ $# -eq 0 ] && help && exit 2

# if you want to add a new target, start here
TARGETS="mpi blas lapack blacs scalapack amd camd ccolamd colamd metis scotch cholmod mumps umf pack pardiso wsmp taucs superlu bebop matio superlu_dist cblas openblas combblas"

# == SET NEEDED PATHS ==
# Setting some useful paths: $PWD, $MACHINE, $libsearchpath 
# all are needed by functions
S=${PWD}
MACHINE=$(gcc -dumpmachine)
INSTALL_BASE_DIR=${PWD}/${MACHINE}
INSTALL_LIB_DIR=${INSTALL_BASE_DIR}/lib
INSTALL_INC_DIR=${INSTALL_BASE_DIR}/include
INSTALL_BIN_DIR=${INSTALL_BASE_DIR}/bin
mkdir -p ${INSTALL_LIB_DIR} # -p makes parent dirs
mkdir -p ${INSTALL_INC_DIR}
mkdir -p ${INSTALL_BIN_DIR}

# Setting library search paths.
libsearchpath=""
for file in $( ls /etc/ld.so.conf.d ); do # non-POSIX lib paths should be in these files
    file=/etc/ld.so.conf.d/$file
    libsearchpath="${libsearchpath}
    $(<$file)"
done
libsearchpath=$( echo "${libsearchpath}" | grep /  )
commonpaths="/usr/local/lib
/usr/local/lib64
/usr/lib
/usr/lib64
/lib
/lib64 
$customsearchpath" # ^ these paths are proposed by POSIX
for path in $commonpaths; do
  if [ -d $path ]; then # only add them if they exist
    libsearchpath="${libsearchpath}
    $path"
  fi
done
libsearchpath="${libsearchpath}
            ${INSTALL_LIB_DIR}" # concatenate

incsearchpath="/usr/include
            $INSTALL_INC_DIR/CombBLAS
            $INSTALL_INC_DIR" # the CombBLAS dir is just needed because SuperLU is funny

# == SETUP ==
# = Set time + date. =
info "Started $(date)"
TIC=$(date +%s)

# == Determine parallel make capacity. == # TODO evidently, parallel make doesn't work
if [[ ${PARALLEL_MAKE_DISABLED} -eq "yes" ]]; then
  info "Parallel make disabled"
  MAKE="make"
elif [[ ${PARALLEL_MAKE_DISABLED} -eq "no" ]]; then
  NCPU=$(grep "cpu cores" /proc/cpuinfo  | head -1 | cut -d ' ' -f 3)
  info "Detected ${NCPU} cores for compile."
  let NCPU_P1=${NCPU}+1
  MAKE="make -j${NCPU_P1}"
fi

# == CHOOSE WHICH TARGETS TO BUILD ==
# Add a new target also here.
while [ $# != 0 ]; do
  targets=$1
  # recognize target "all"
  if [[ "$target" = "all" ]]; then
    targets="$TARGETS"
  fi
  for target in ${targets[@]}; do
    case $target in
      "mpi") 
        build_mpi
        ;;
      "blas") 
        build_blas
        ;;
      "lapack") 
        build_lapack
        ;;
      "blacs") 
        build_blacs
        ;;
      "scalapack") 
        build_scalapack
        ;;
      "amd") 
        build_amd
        ;;
      "camd") build_amd;; # is included in amd
      "ccolamd") build_ccolamd;;
      "combblas") build_combblas;;
      "colamd") build_colamd;;
      "metis") build_metis;;
      "scotch") build_scotch;;
      "cholmod") 
        build_cholmod
        ;;
      "mumps") build_mumps;;
      "umfpack") build_umfpack;;
      "pardiso") build_pardiso;;
      "wsmp") build_wsmp;;
      "taucs")
        build_taucs
        ;;
      "superlu") 
        build_superlu
        ;;
      "bebop") build_bebop;;
      "matio") build_matio;;
      "superlu_dist") build_superlu_dist;;
      "openblas") build_openblas;;
      "cblas") build_cblas;;
      "cilk") build_cilk;;
      "clean") echo "cleaning..." && rm -rf ${TARGETS} && exit 0;;
      "distclean") 
        echo "cleaning..." && rm -rf ${TARGETS} && rm -rf ${INSTALL_BASE_DIR} && exit 0
        ;;
      *) 
        help && echo "ERROR: options - unrecognized target or option $target"
        ;;
    esac
  done
  shift;
done


# make install lib dir
#sleep 2

TOC=$(date +%s)
let DELTA=${TOC}-${TIC}

# print time 
info "Finished $(date) (${DELTA}s)"  #TODO $(date --date=${DELTA} +%T))"
exit
